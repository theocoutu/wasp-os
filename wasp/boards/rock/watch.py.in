# SPDX-License-Identifier: LGPL-3.0-or-later
# Copyright (C) 2020 Daniel Thompson

def nop():
    pass
schedule = nop
def _callback(obj):
    schedule()

# Start measuring time (and feeding the watchdog) before *anything* else
from machine import RTCounter
from drivers.nrf_rtc import RTC
rtc = RTC(RTCounter(1, mode=RTCounter.PERIODIC, period=1, callback=_callback))
rtc.counter.start()

import gc
import os
import time

import draw565

from machine import I2C
from machine import Pin
#from machine import Signal
from machine import SPI
from machine import PWM

from drivers.battery import Battery
#from drivers.lis2dh import LIS2DH
from drivers.cst816s import CST816S
#from drivers.hx3600 import HX3600
from drivers.signal import Signal
from drivers.st7789 import ST7789_SPI
from drivers.vibrator import Vibrator
from flash.flash_spi import FLASH

from ubluepy import uart_connected as connected

class Backlight(object):
    pbl = PWM(Pin("BL"), freq=20000)

    def __init__(self, level=1):
        self.set(level)

    def set(self, level):
        if level >= 3:
            pbl.duty(1000)
        elif level == 2:
            pbl.duty(640)
        elif level == 1:
            pbl.duty(384)

# Setup the display (and manage the backlight)
backlight = Backlight(0)
spi0 = SPI(0)
spi0.init(polarity=1, phase=1, baudrate=8000000)
display = ST7789_SPI(240, 280, spi0,
        cs=Pin("DISP_CS", Pin.OUT),
        dc=Pin("DISP_DC", Pin.OUT),
        res=Pin("DISP_RST", Pin.OUT))
drawable = draw565.Draw565(display)

spi1 = SPI(1)

def boot_msg(s):
    drawable.string(s, 0, 108, width=240)
    if safe_mode:
        time.sleep_ms(500)

safe_mode = False
boot_msg("Init button")
button = Pin('BUTTON', Pin.IN)
safe_mode = button.value()
if safe_mode:
    backlight.set(1)
    time.sleep(1)

try:
    # Setup the last few bits and pieces
    boot_msg("Init hardware")
    battery = Battery(
            Pin('BATTERY', Pin.IN),
            Signal(Pin('CHARGING', Pin.IN), invert=True)
    i2c = I2C(1, scl='I2C_SCL', sda='I2C_SDA')
    #accel = LIS2DH(i2c)
    #hrs = HX3600(i2c)
    touch = CST816S(i2c,
                    Pin('TP_INT', Pin.IN), Pin('TP_RST', Pin.OUT, value=0),
                    _callback)
    motor_en = Pin('MOTOR_EN', Pin.OUT)
    vibrator = Vibrator(Pin('MOTOR', Pin.OUT, value=0), active_low=True)

    # Mount the filesystem
    boot_msg("Init SPINOR")
    flash = FLASH(spi1, (Pin('NOR_CS', Pin.OUT, value=1),))
    try:
        boot_msg("Mount FS")
        os.mount(flash, '/flash')
    except (AttributeError, OSError) as e:
        # Format the filesystem (and provide a default version of main.py)
        boot_msg("Format FS")
        os.VfsLfs2.mkfs(flash)
        boot_msg("Retry mount FS")
        os.mount(flash,'/flash')
        boot_msg("Write main.py")
        with open('/flash/main.py', 'w') as f:
            f.write('''\
#include('main.py')
''')

    # Only change directory if the button is not pressed (this will
    # allow us access to fix any problems with main.py)!
    if not safe_mode:
        boot_msg("Enter /flash")
        os.chdir('/flash')
        boot_msg("main.py")
    else:
        boot_msg("Safe mode")
except:
    drawable.string("FAILED", 0, 136, width=240)
backlight.set(1)

gc.collect()
free = gc.mem_free()
